- Class: meta
  Course: Getting and Cleaning Data
  Lesson: Dates and Times with lubridate
  Author: Nick Carchedi
  Type: Coursera
  Organization: JHU Biostat
  Version: 2.2.13

- Class: text
  Output: In this lesson, we'll explore the lubridate R package, by Garrett Grolemund and Hadley Wickham. According to the package authors, "lubridate has a consistent, memorable syntax, that makes working with dates fun instead of frustrating." If you've ever worked with dates in R, that statement probably has your attention.

- Class: cmd_question
  Output: lubridate should have been automatically installed (if necessary) and loaded upon starting this lesson. To build the habit, we'll go ahead and (re)load the package now. Type library(lubridate) to do so.
  CorrectAnswer: library(lubridate)
  AnswerTests: omnitest(correctExpr='library(lubridate)')
  Hint: Type library(lubridate) to (re)load the package.

- Class: cmd_question
  Output: lubridate contains many useful functions. We'll only be covering the basics here. Type help(package = lubridate) to bring up an overview of the package, including the package DESCRIPTION, a list of available functions, and a link to the official package vignette.
  CorrectAnswer: help(package = lubridate)
  AnswerTests: omnitest(correctExpr='help(package = lubridate)')
  Hint: help(package = lubridate) will bring up the package documentation.

- Class: text
  Output: Let's get going!

- Class: cmd_question
  Output: The today() function returns today's date. Give it a try, storing the result in a new variable called this_day.
  CorrectAnswer: this_day <- today()
  AnswerTests: omnitest(correctExpr='this_day <- today()')
  Hint: Use this_day <- today() to store today's date in a variable called this_day.

- Class: cmd_question
  Output: Print the contents of this_day to the console.
  CorrectAnswer: this_day
  AnswerTests: any_of_exprs('this_day', 'print(this_day)')
  Hint: Type this_day to print its contents.

- Class: cmd_question
  Output: There are three components to this date. In order, they are year, month, and day. We can extract any of these components using the year(), month(), or day() function, respectively. Try any of those on this_day now.
  CorrectAnswer: month(this_day)
  AnswerTests: any_of_exprs('year(this_day)', 'month(this_day)', 'day(this_day)')
  Hint: Try passing one argument, this_day, to year(), month(), or day().

- Class: cmd_question
  Output: We can also get the day of the week from this_day using the wday() function. It will be represented as a number, such that 1 = Sunday, 2 = Monday, 3 = Tuesday, etc.
  CorrectAnswer: wday(this_day)
  AnswerTests: omnitest('wday(this_day)')
  Hint: wday(this_day) will give the day of the week, represented as a number.

- Class: cmd_question
  Output: "Now try the same thing again, except this time add a second argument, label = TRUE, to display the *name* of the weekday (represented as an ordered factor)."
  CorrectAnswer: wday(this_day, label = TRUE)
  AnswerTests: omnitest('wday(this_day, label = TRUE)')
  Hint: wday(this_day, label = TRUE) will give you the day of the week, represented as a character string.

- Class: cmd_question
  Output: In addition to handling dates, lubridate is great for working with date and time combinations, referred to as date-times. The now() function returns the date-time representing this exact moment in time. Give it a try and store the result in a variable called this_moment.
  CorrectAnswer: this_moment <- now()
  AnswerTests: omnitest('this_moment <- now()')
  Hint: Store the result of now() in a new variable called this_moment.

- Class: cmd_question
  Output: View the contents of this_moment now.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to print its contents to the console.

- Class: cmd_question
  Output: Just like with dates, we can extract the year, month, day, or day of week. However, we can also use hour(), minute(), and second() to extract specific time information. Try any of these three new functions now to extract one piece of time information from this_moment.
  CorrectAnswer: second(this_moment)
  AnswerTests: any_of_exprs('hour(this_moment)', 'minute(this_moment)', 'second(this_moment)')
  Hint: Use hour(), minute(), or second() to extract a single piece of time information from this_moment.

- Class: text
  Output: today() and now() provide neatly formatted date-time information. When working with dates 'in the wild', this won't always (and perhaps rarely will) be the case.

- Class: text
  Output: Fortunately, lubridate offers a variety of functions for parsing date-times. These functions take the form of ymd(), dmy(), hms(), ymd_hms(), etc., where each letter in the name of the function stands for the location of years (y), months (m), days (d), hours (h), minutes (m), and/or seconds (s) in the date-time being read in.

- Class: cmd_question
  Output: To see how these functions work, try ymd("1989-05-17"). You must surround the date with quotes. Store the result in a variable called my_date.
  CorrectAnswer: my_date <- ymd("1989-05-17")
  AnswerTests: omnitest('my_date <- ymd("1989-05-17")')
  Hint: Type my_date <- ymd("1989-05-17") to see how ymd() works, storing the result in my_date.

- Class: cmd_question
  Output: Now take a look at my_date.
  CorrectAnswer: my_date
  AnswerTests: omnitest('my_date')
  Hint: Type my_date to view its contents.

- Class: cmd_question
  Output: It looks almost the same, except for the addition of a time zone. We'll discuss time zones later in the lesson. Below the surface, there's another important change that takes place when lubridate parses a date. Type class(my_date) to see what that is.
  CorrectAnswer: class(my_date)
  AnswerTests: omnitest('class(my_date)')
  Hint: Type class(my_date) to see what important change takes place when lubridate parses a date.

- Class: text
  Output: So ymd() took a character string as input and returned an object of class POSIXct. It's not necessary that you understand what POSIXct is, but just know that it is one way that R stores date-time information internally.

- Class: cmd_question
  Output: '"1989-05-17" is a fairly standard format, but lubridate is ''smart'' enough to figure out many different date-time formats. Use ymd() to parse "1989 May 17".'
  CorrectAnswer: ymd("1989 May 17")
  AnswerTests: omnitest('ymd("1989 May 17")')
  Hint: Try ymd("1989 May 17") to see that ymd() is capable of handling different date-time formats.

- Class: cmd_question
  Output: Despite being formatted differently, the last two dates had the year first, then the month, then the day. Hence, we used ymd() to parse them. What do you think the appropriate function is for parsing "March 12, 1975"? Give it a try.
  CorrectAnswer: mdy("March 12, 1975")
  AnswerTests: any_of_exprs('mdy("March 12, 1975")', 'mdy("March 12 1975")')
  Hint: mdy() will correctly parse "March 12, 1975". The function name, mdy(), stands for year (y), month (m), and day (d), in order from left to right.

- Class: cmd_question
  Output: We can even throw something funky at it and lubridate will often know the right thing to do. Parse 25081985, which is supposed to represent the 25th day of August 1985. Note that we are actually parsing a numeric value here -- not a character string -- so leave off the quotes.
  CorrectAnswer: dmy(25081985)
  AnswerTests: omnitest('dmy(25081985)')
  Hint: Use dmy() to parse 25081985 to see how lubridate handles something a little different from what we've seen so far.

- Class: cmd_question
  Output: But be careful, it's not magic. Try ymd("192012") to see what happens when we give it something more ambiguous. Surround the number with quotes again, just to be consistent with the way most dates are represented (as character strings).
  CorrectAnswer: ymd("192012")
  AnswerTests: omnitest('ymd("192012")')
  Hint: Try ymd("192012") to see what happens when lubridate can't figure out what the format of the date is.

- Class: cmd_question
  Output: You got a warning message because it was unclear what date you wanted. When in doubt, it's best to be more explicit. Repeat the same command, but add two dashes OR two forward slashes to "192012" so that it's clear we want January 2, 1920.
  CorrectAnswer: ymd("1920/1/2")
  AnswerTests: any_of_exprs('ymd("1920/1/2")', 'ymd("1920-1-2")')
  Hint: ymd("1920/1/2") is more explicit than ymd("192012") and lubridate knows how to handle it.

- Class: cmd_question
  Output: In addition to dates, we can parse date-times. I've created a date-time object called dt1. Take a look at it now.
  CorrectAnswer: dt1
  AnswerTests: any_of_exprs('dt1', 'print(dt1)')
  Hint: Type dt1 to view its contents.

- Class: cmd_question
  Output: Now parse dt1 with ymd_hms().
  CorrectAnswer: ymd_hms(dt1)
  AnswerTests: omnitest('ymd_hms(dt1)')
  Hint: ymd_hms(dt1) will parse dt1.

- Class: cmd_question
  Output: What if we have a time, but no date? Use the appropriate lubridate function to parse "03:22:14" (hours:minutes:seconds).
  CorrectAnswer: hms("03:22:14")
  AnswerTests: omnitest('hms("03:22:14")')
  Hint: Give hms("03:22:14") a try. In this case, hms() stands for hours (h), minutes (m), and seconds (s).

- Class: cmd_question
  Output: lubridate is also capable of handling vectors of dates, which is particularly helpful when you need to parse an entire column of data. I've created a vector of dates called dt2. View its contents now.
  CorrectAnswer: dt2
  AnswerTests: any_of_exprs('dt2', 'print(dt2)')
  Hint: Type dt2 to view its contents.

- Class: cmd_question
  Output: Now parse dt2 using the appropriate lubridate function.
  CorrectAnswer: ymd(dt2)
  AnswerTests: omnitest('ymd(dt2)')
  Hint: Use ymd(dt2) to parse the vector of dates named dt2.

- Class: text
  Output: "The update() function allows us to update one or more components of a date-time. For example, let's say the current time is 08:34:01 (hh:mm:ss). Update this_moment to the new time using the following command:\n\nupdate(this_moment, hours = 8, minutes = 34, seconds = 01)."

- Class: cmd_question
  Output: Unless you're a superhero, some time has passed since you created this_moment. Use update() to make it match the current time. If you don't know the exact time, try changing the time to 10:06:00. No need to save the result.
  CorrectAnswer: update(this_moment, hours = 10, minutes = 6, seconds = 0)
  AnswerTests: expr_uses_func('update')
  Hint: Try update(this_moment, hours = 10, minutes = 6, seconds = 0), which will update the time to 10:06:00 (hh:mm:ss).
























